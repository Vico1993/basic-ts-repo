name: Basic CI

on: pull_request

env:
    NODE_VERSION: 16.x

jobs:
    # build:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - uses: actions/checkout@v2

    #         - name: Setup Environment ( ${{ env.NODE_VERSION }} )
    #           uses: actions/setup-node@v2
    #           with:
    #               node-version: ${{ env.NODE_VERSION }}

    #         - name: Install dependencies
    #           run: npm ci

    #         - name: Build package
    #           run: npm run build

    # lint:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - uses: actions/checkout@v2

    #         - name: Setup Environment ( ${{ env.NODE_VERSION }} )
    #           uses: actions/setup-node@v2
    #           with:
    #               node-version: ${{ env.NODE_VERSION }}

    #         - name: Install dependencies
    #           run: npm ci

    #         - run: npm run lint

    # test:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - uses: actions/checkout@v2

    #         - name: Setup Environment ( ${{ env.NODE_VERSION }} )
    #           uses: actions/setup-node@v2
    #           with:
    #               node-version: ${{ env.NODE_VERSION }}

    #         - name: Install dependencies
    #           run: npm ci

    #         - run: npm run test
    pr_check:
        name: Bot reviewer
        runs-on: ubuntu-latest
        steps:
            # - name: Bot approved
            #   env:
            #       GH_TOKEN: ${{ github.token }}
            #   run: |
            #       gh pr review ${{ github.event.pull_request.number }} -a -b "LGTM! :robot: :rocket: :fire:" -R ${{ github.repository }}

            - name: Check who make the commit
              if: github.event.action == 'synchronize'
              env:
                  GH_TOKEN: ${{ github.token }}
              run: |
                  # Getting the commit that trigger the synchronize event
                  # Last commit from the head
                  commit=$( gh api /repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.ref }} )

                  # Type of User who trigger the update
                  commiterType=$(jq -n --argjson data "$commit" '$data.committer.type')

                  # Number of parents the commit has
                  # 1 parent, classic commit
                  # 2 parent it's a merge commit
                  parentLength=$(jq -n --argjson data "$commit" '$data.parents | length')

                  # Dismiss Logic
                  # If it's a BOT or a Merge commit we don't dismiss
                  # Everything else, need to dismiss approvals
                  if [[ $commiterType != "User" || $parentLength > 1 ]]; then

                      # Bot is going to list all review and dismiss one by one
                      reviews=$( gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/pulls/${{ github.event.number }}/reviews )

                      approved=$(jq -n --argjson data "$reviews" 'map(select(any(.attributes; .state == "APPROVED")) | {id})')

                      echo $approved

                      # for review in $reviews
                      # do
                      #   echo "$review"
                      #   reviewId=$(jq -n --argjson data "$review" '$data.id')

                      #   echo "reviewId:"
                      #   echo $reviewId

                      #   # reviewState=$(jq -n --argjson data "$review" '$data.state')

                      #   # if [ $reviewState == "APPROVED" ]; then
                      #   #   gh api /repos/${{ github.repository }}/pulls/${{ github.event.number }}/reviews/$reviewId/dismissals -d '{"message":"An update has been made, you need to review again! :eyes:","event":"DISMISS"}'
                      #   # fi
                      # done
                  fi

                  echo "done"
